#!/bin/bash
# vim: ts=3 sw=3 fdm=indent:
: utility - impl-update,fence,fix
	# local ei=0
	ERR_UNSPEC=$((ei++))	# unspecified error
	ERR_INST=$((ei++))	# error in install
	ERR_CONF=$((ei++))	# error in configure process
	ERR_CONF_NOTFOUND=$((ei++))	# configure script not found
	ERR_REDO=$((ei++))	# error in redo
	ERR_ALTER=$((ei++))	# error in alter
	ERR_PESINT=$((ei++)) # error in patch3elf set interpreter
	ERR_PESRP=$((ei++))	# error in patch elf set rpath
	ERR_BUILDALL=$((ei++))	# error in buildall
	ERR_PREFIX_FULL=$((ei++))	# prefix has content 
	ERR_XPKG=$((ei++))		# error in xpkg

	timens(){
		cat /proc/timer_list  | grep now | cut -d\  -f3
	}
	impl-update(){
		grep '^[ '$'\t'']*[a-z]\+-impl *(' $_r/scripts/main |\
			sed 's/^[ \t]*\([a-z]\+\)-impl *(.*$/\1(){ fence \&\& \1-impl "$@" ; } /g' > $_r/scripts/impl
	}
	fence(){
		bf=""
		d="$(pwd)" # current source dirname
		b=""
		d="${d##$_r/}"
		b="$d"
		dd="${d%%-first}"
		case "$dd" in
			libc* | glibc* ) b=glibc ;;
			binutils* ) b=binutils-gdb ;;
			gcc* ) b=gcc ;;
			* ) b="$dd"
		esac
	}
	fix(){
		case "$1" in
			e* ) f=env ;;
			c* ) f=scripts/configure ;;
			* ) f=scripts/main ;;
		esac
		vi $_r/$f
		impl-update
		# ( cd $_r ; git add -A ; git commit -a -m $( date +%s) )
		. $_r/env
	}
	newlog(){
		date +%s > $_r/scripts/log/latestlogtime
	}
	log(){
		local lf="$_r/scripts/log/$( cat $_r/scripts/log/latestlogtime )"
		if [ -z "$nolog" ] ; then
			otim="$( timens )"
			dtim=300000000
			sectim=1000000000 # 1 second, 9 zeroes
			dstim="$(( $dtim / $sectim )).$(( $dtim % $sectim))"
			ctim=0
			pklines=1
			pkval=1
			linesum=1
			linecount=1
			lineavg=1
			tupac=1
			echo -n "$1....."
			#"${@:2}" |& stdbuf -i0 -o0 sed -zu 's/[ 	]\+\\\n[ 	]\+/ /g' | while read -r l ; do
			"${@:2}" |& while read -t "$dstim" -r l || test $? -gt 128 ; do
				if [ -n "$l" ] ; then
					echo "$l" >>$lf
					let ctim="$ctim+1"
				fi
				tim="$( timens )"
				if [ $(( $tim - $otim )) -gt $dtim ] ; then
					if [ $ctim -ge $(( $pkval * $pklines / $linecount )) ] ; then
						pklines=$linecount
						pkval=$ctim
					fi
					let otim="$otim + $dtim"
					ctim=0
					let linesum="$linesum+$ctim"
					let linecount="$linecount+1"
					let lineavg="$linesum/$linecount"
					let tupac="( ( ( $pkval * $pklines / $linecount ) - $lineavg ) / 5 )"
					echo -n .
				fi
				if [[ $ctim -gt $(( $lineavg + $tupac * 5 )) ]] ; then
					ch="#"
				elif [[ $ctim -gt $(( $lineavg + $tupac * 4 )) ]] ; then
					ch="@"
				elif [[ $ctim -gt $(( $lineavg + $tupac * 3 )) ]] ; then
					ch="$"
				elif [[ $ctim -gt $(( $lineavg + $tupac * 2 )) ]] ; then
					ch="%"
				elif [[ $ctim -gt $(( $lineavg + $tupac )) ]] ; then
					ch="!"
				elif [[ $ctim -gt $(( $lineavg )) ]] ; then
					ch="*"
				elif [[ $ctim -gt $(( $lineavg * 4 / 5 )) ]] ; then
					ch="+"
				elif [[ $ctim -gt $(( $lineavg * 3 / 5 )) ]] ; then
					ch="-"
				else
					ch="."
				fi
				echo -ne '\b\b\b'"$ch.."
				if [ -z "$l" ] ; then
					echo -n .
					otim=$tim
					ctim=0
				fi
				unset l
			done
			echo
		else
			echo "CMD: ${@:2}" |& tee -a "$lf"
			( "${@:2}" ) |& tee -a "$lf"
			#"${@:2}" |&  sed -zu 's/[ 	]\+\\\n[ 	]\+/ /g' 
		fi
	}
	logmsg(){
		echo "$@"
		echo "$@" >>$_r/scripts/log/$t
	}
: configuration - ccat,conf,reconf,confhelp
	conf-impl(){
		if declare -fF conf-$d >/dev/null ; then
			eval $_s/$b/configure "$( conf-$d )"  || return $?
		else
			echo "No configure found."
			return $ERR_CONF_NOTFOUND
		fi
	}
	reconf-impl(){
		vi "$bf"
		conf
	}
	confhelpa-impl(){
		$_s/$d/configure --help=recursive |& less
	}
	confhelp-impl(){
		$_s/$d/configure --help |& less
	}
: make - go,inst,kernelh
	go-impl(){
		tgtr=all
#		case "$d" in
#			gcc-first ) tgtr=all-gcc ;;
#			gcc* ) tgtr=all-gcc ;;
#		esac

		make $_m_fl $tgtr "$@"
	}
	inst-impl(){
		instvar="DESTDIR"
		instcmd="install"
		case "$d" in
			glibc* | libc* ) instvar="install_root" ;;
#			gcc* ) instcmd="install-gcc" ;;
		esac
		destd="$_r/dest/$d"
		mkdir "$destd"
		e=0
		make $_m_fl -C $_r/$d $_m_fl $instvar="$destd" $instcmd "$@" &&
		pesrp $destd $_p/lib || 
		e=1
		return $e
	}
	place-impl(){
		echo "$d	$_r	$_p"
		echo rsync -Pav "$_r/dest/$d/$_p/" "$_p" || return $?
		rsync -Pav "$_r/dest/$d/$_p/" "$_p" || return $?
	}
	init-pre(){
		rm -rf $_p
		mkdir -p $_p/bin
		echo -e "#!/bin/bash\necho -n valid" >$_p/bin/validate
		chmod +x $_p/bin/validate
		if [ ! "$( $_p/bin/validate )" == "valid" ] ; then
			echo "YAY"
		fi
		local dirh="$( readlink -f $_p/../include )"
		local dirhmark="linux.h"
		if [ "$(cat $dirh/.mark)" == "$dirhmark" ] ; then
			rsync -Pav "$dirh" "$_p"
		else
			git -C $_s/linux checkout current_stable	
			inst-kernel $_a_bl $dirh
			echo "$dirhmark" > "$dirh/.mark"
		fi
	}
	inst-kernel(){ # params are: arch path
		make $_m_fl -C $_s/linux INSTALL_HDR_PATH="$2" ARCH="$1" headers_install
	}
	kernelh-impl(){
		git -C $_s/linux checkout current_stable	
		inst-kernel $_a_bl $dirh
	}
: misc - ldcheck,ldfix,redo,buildall
	redo-impl(){ 
		[ -z "$1" ] && return
		if [ -d "$_r/$1" ] ; then
			cd $_r &&
			chmod -R u+rw $_r/$d &&
			rm -r $_r/$1
		fi
		mkdir $_r/$1 &&
		cd $_r/$1 &&
		fence &&
		conf-impl &&
		go-impl &&
		inst-impl || return $ERR_REDO
	}
	alter-impl(){
		redo-impl "$@" &&
		place-impl || return $ERR_ALTER
	}
	pepint () { # PatchElf Print INTerpreter;
		local ldir="${1:-$_r/${d:-.}}"
		find "$ldir" -type f -exec bash -c 'echo -n "{} " ; patchelf --print-interpreter "{}"' \;
	}
	pesint(){ 
		local ldir="${1:-.}"
		local ldfi="${2:-$_p/lib/ld-2.26.so}"
		if [ ! -f "$_p/lib/ld-2.26.so" ]; then
			echo "Cannot fix, no linker found."
			return $ERROR_PESINT
		fi
		find "$ldir" -type f -exec bash -c 'echo -n "{} " ; patchelf --set-interpreter '"$ldfi"' "{}"' \;
	}
	pesrp(){ 
		local ldir="${1:-.}"
		local lddir
		if [ -n "$2" ]; then
			lddir="$2"
		elif [ -d "$_p/lib" ]; then
			lddir="$_p/lib"
		else
			echo "Cannot fix, no libdir found."
			return $ERR_PESRP
		fi
		TMPDIR=${TMPDIR:-/tmp}
		find "$ldir" -type f -exec bash -c 'patchelf --set-rpath "'"$dldir"'" "{}" >& '"$TMPDIR/pesrp.tmp"' && echo "{} patched. '"$( cat $TMPDIR/pesrp.tmp | tr '\n' ' ' )"'" ; rm -rf '"'$TMPDIR/pesrp.tmp'" \;
	}
	buildall-postcheck(){
		mkdir -p $_p/lib &&
		xpkg binutils-first gmp-first mpfr-first mpc-first isl-first zlib-first gcc-first || return $ERR_BUILDALL_POST
	}
	buildall(){
		if [ -d "$_p" ] ; then
			echo ERROR: something is in the way
			return $ERR_PREFIX_FULL
		fi	
		buildall-postcheck
		local e=$?
		[ $e -gt 0 ] && echo "ERROR: something shitty happened, woops"
		return $?
	}
	xpkg(){
		[ -n "$1" ] &&
		mkdir -p $_r/$1 &&
		cd $_r/$1 &&
		fence &&
		log "Building $1" alter-impl "$@" &&
		shift &&
		xpkg "$@" || return $ERR_XPKG 
	}
	rebuildall-impl (){
		log "Preparing the prefix" init-pre
		buildall-postcheck "$@"
	}
	lastlog () {
		 less -S "$(find $_r/scripts/log | grep '/[0-9]\+$' | sort -rn | head -1)"
	}
	lastclog () { 
		 llf="$(find $_r/scripts/log | grep '/[0-9]\+$' | sort -rn | head -1)"
		 cllf="$(grep -B2 'See .config.log. for more details' "$llf" | head -1 | sed 's/configure: error: in `//g ; s/'\''://g')/config.log"
		 less -S "$cllf"
	}
: eof
